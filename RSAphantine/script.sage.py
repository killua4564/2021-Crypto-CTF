

# This file was *autogenerated* from the file /2021/RSAphantine/script.sage
from sage.all_cmdline import *   # import sage library

_sage_const_47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613520747411963822349374260144229698759495359592287331083229572369186844312169397998958687629858407857496154424105344376591742814310010312178029414792153520127354594349356721 = Integer(47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613520747411963822349374260144229698759495359592287331083229572369186844312169397998958687629858407857496154424105344376591742814310010312178029414792153520127354594349356721); _sage_const_89701863794494741579279495149280970802005356650985500935516314994149482802770873012891936617235883383779949043375656934782512958529863426837860653654512392603575042842591799236152988759047643602681210429449595866940656449163014827637584123867198437888098961323599436457342203222948370386342070941174587735051 = Integer(89701863794494741579279495149280970802005356650985500935516314994149482802770873012891936617235883383779949043375656934782512958529863426837860653654512392603575042842591799236152988759047643602681210429449595866940656449163014827637584123867198437888098961323599436457342203222948370386342070941174587735051); _sage_const_47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613609786612391835856376321085593999733543104760294208916442207908167085574197779179315081994735796390000652436258333943257231020011932605906567086908226693333446521506911058 = Integer(47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613609786612391835856376321085593999733543104760294208916442207908167085574197779179315081994735796390000652436258333943257231020011932605906567086908226693333446521506911058); _sage_const_486675922771716096231737399040548486325658137529857293201278143425470143429646265649376948017991651364539656238516890519597468182912015548139675971112490154510727743335620826075143903361868438931223801236515950567326769413127995861265368340866053590373839051019268657129382281794222269715218496547178894867320406378387056032984394810093686367691759705672 = Integer(486675922771716096231737399040548486325658137529857293201278143425470143429646265649376948017991651364539656238516890519597468182912015548139675971112490154510727743335620826075143903361868438931223801236515950567326769413127995861265368340866053590373839051019268657129382281794222269715218496547178894867320406378387056032984394810093686367691759705672); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_76 = Integer(76); _sage_const_3 = Integer(3); _sage_const_67 = Integer(67); _sage_const_31337 = Integer(31337); _sage_const_1 = Integer(1)
from factordb.factordb import FactorDB
from gmpy2 import isqrt, next_prime
from Crypto.Util.number import *

a = _sage_const_47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613520747411963822349374260144229698759495359592287331083229572369186844312169397998958687629858407857496154424105344376591742814310010312178029414792153520127354594349356721 
b = _sage_const_89701863794494741579279495149280970802005356650985500935516314994149482802770873012891936617235883383779949043375656934782512958529863426837860653654512392603575042842591799236152988759047643602681210429449595866940656449163014827637584123867198437888098961323599436457342203222948370386342070941174587735051 
c = _sage_const_47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613609786612391835856376321085593999733543104760294208916442207908167085574197779179315081994735796390000652436258333943257231020011932605906567086908226693333446521506911058 
flag = _sage_const_486675922771716096231737399040548486325658137529857293201278143425470143429646265649376948017991651364539656238516890519597468182912015548139675971112490154510727743335620826075143903361868438931223801236515950567326769413127995861265368340866053590373839051019268657129382281794222269715218496547178894867320406378387056032984394810093686367691759705672 

'''
a = 2*z**5 - x**3 + y*z
b = x**4 + y**5 + x*y*z
c = y**6 + 2*z**5 + z*y

c - a = x**3 + y**6 = (x + y**2)(x**2 - x*y**2 + y**4)
'''

factor = FactorDB(c-a)
factor.connect()
ca1, ca2 = factor.get_factor_list()

x = var("x")
assume(x, "integer")
sol = solve(x**_sage_const_2  - x*(ca1-x) + (ca1-x)**_sage_const_2  == ca2, x)
print(sol)
# y = var("y")
# assume(y, "integer")
# sol = solve(y^4 - (ca1-y^2)*y^2 + (ca1-y^2)**2 == ca2, y)
# print([ca1 - y^2 for y in sol])

for x in map(int, sol):
    if x > ca1:
        continue

    y = int(isqrt(ca1 - x))
    if x + y**_sage_const_2  != ca1:
        continue

    z = (b - x**_sage_const_4  - y**_sage_const_5 ) // (x*y)
    if x**_sage_const_4  + y**_sage_const_5  + x*y*z != b:
        continue

    p = next_prime(x**_sage_const_2  + z**_sage_const_2  + y**_sage_const_2  << _sage_const_76 )
    q = next_prime(z**_sage_const_2  + y**_sage_const_3  - y*x*z ^ _sage_const_67 )
    d = inverse_mod(_sage_const_31337 , (p-_sage_const_1 )*(q-_sage_const_1 ))
    print(long_to_bytes(pow(flag, d, p*q)).decode())

