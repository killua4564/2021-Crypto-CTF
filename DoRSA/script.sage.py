

# This file was *autogenerated* from the file script.sage
from sage.all_cmdline import *   # import sage library

_sage_const_93546309251892226642049894791252717018125687269405277037147228107955818581561 = Integer(93546309251892226642049894791252717018125687269405277037147228107955818581561); _sage_const_36029694445217181240393229507657783589129565545215936055029374536597763899498239088343814109348783168014524786101104703066635008905663623795923908443470553241615761261684865762093341375627893251064284854550683090289244326428531870185742069661263695374185944997371146406463061296320874619629222702687248540071 = Integer(36029694445217181240393229507657783589129565545215936055029374536597763899498239088343814109348783168014524786101104703066635008905663623795923908443470553241615761261684865762093341375627893251064284854550683090289244326428531870185742069661263695374185944997371146406463061296320874619629222702687248540071); _sage_const_29134539279166202870481433991757912690660276008269248696385264141132377632327390980628416297352239920763325399042209616477793917805265376055304289306413455729727703925501462290572634062308443398552450358737592917313872419229567573520052505381346160569747085965505651160232449527272950276802013654376796886259 = Integer(29134539279166202870481433991757912690660276008269248696385264141132377632327390980628416297352239920763325399042209616477793917805265376055304289306413455729727703925501462290572634062308443398552450358737592917313872419229567573520052505381346160569747085965505651160232449527272950276802013654376796886259); _sage_const_4813040476692112428960203236505134262932847510883271236506625270058300562795805807782456070685691385308836073520689109428865518252680199235110968732898751775587988437458034082901889466177544997152415874520654011643506344411457385571604433702808353149867689652828145581610443408094349456455069225005453663702 = Integer(4813040476692112428960203236505134262932847510883271236506625270058300562795805807782456070685691385308836073520689109428865518252680199235110968732898751775587988437458034082901889466177544997152415874520654011643506344411457385571604433702808353149867689652828145581610443408094349456455069225005453663702); _sage_const_2343495138227787186038297737188675404905958193034177306901338927852369293111504476511643406288086128052687530514221084370875813121224208277081997620232397406702129186720714924945365815390097094777447898550641598266559194167236350546060073098778187884380074317656022294673766005856076112637129916520217379601 = Integer(2343495138227787186038297737188675404905958193034177306901338927852369293111504476511643406288086128052687530514221084370875813121224208277081997620232397406702129186720714924945365815390097094777447898550641598266559194167236350546060073098778187884380074317656022294673766005856076112637129916520217379601); _sage_const_1 = Integer(1); _sage_const_256 = Integer(256); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_513 = Integer(513)
from Crypto.Util.number import *

e = _sage_const_93546309251892226642049894791252717018125687269405277037147228107955818581561 
n1 = _sage_const_36029694445217181240393229507657783589129565545215936055029374536597763899498239088343814109348783168014524786101104703066635008905663623795923908443470553241615761261684865762093341375627893251064284854550683090289244326428531870185742069661263695374185944997371146406463061296320874619629222702687248540071 
n2 = _sage_const_29134539279166202870481433991757912690660276008269248696385264141132377632327390980628416297352239920763325399042209616477793917805265376055304289306413455729727703925501462290572634062308443398552450358737592917313872419229567573520052505381346160569747085965505651160232449527272950276802013654376796886259 
enc1 = _sage_const_4813040476692112428960203236505134262932847510883271236506625270058300562795805807782456070685691385308836073520689109428865518252680199235110968732898751775587988437458034082901889466177544997152415874520654011643506344411457385571604433702808353149867689652828145581610443408094349456455069225005453663702 
enc2 = _sage_const_2343495138227787186038297737188675404905958193034177306901338927852369293111504476511643406288086128052687530514221084370875813121224208277081997620232397406702129186720714924945365815390097094777447898550641598266559194167236350546060073098778187884380074317656022294673766005856076112637129916520217379601 

'''
p = u * v + 1
q = u * y + 1
r = x * y + 1
s = k * v + 1  (k = e * d // phi)

n1 = p * r
n2 = q * s

n2   q * s   (u * y + 1)(k * v + 1)   u * y * k * v   k
-- = ----- = ---------------------- â‰ˆ ------------- = -
n1   p * r   (u * v + 1)(x * y + 1)   u * y * x * v   x

e * d = 1 mod phi
=> e * d = k * phi + 1
=> k * phi + 1 = 0 mod e
=> phi = -1/k mod e

phi = u * v * x * y
=> phi = 0 mod x

|n1 - phi| = |p * r - (p-1) * (r-1)| = p + r - 1 <= 2^513
'''

cf = continued_fraction(n2 / n1)

for idx in range(_sage_const_1 , len(cf)):
    k = cf.numerator(idx)
    x = cf.denominator(idx)
    if GCD(e, k) > _sage_const_1 :
        continue
    if x.nbits() != _sage_const_256 :
        continue
    
    phi = crt(inverse_mod(-k, e), _sage_const_0 , e, x)
    lcm = e * x // GCD(e, x)
    phi += (n1 - phi - _sage_const_2 **_sage_const_513 ) // lcm * lcm
    while phi < n1:
        phi += lcm
        if GCD(e, phi) > _sage_const_1 :
            continue
        d = inverse_mod(e, phi)
        flag = long_to_bytes(pow(enc1, d, n1))
        if flag.startswith(b"CCTF"):
            print(flag.decode())
            break

