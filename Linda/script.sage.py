

# This file was *autogenerated* from the file /2021/Linda/script.sage
from sage.all_cmdline import *   # import sage library

_sage_const_207518404209548066524338597893734179511579167725131843041064866227099212459608943719008703724295244625284967169492023289945294798524212134390763647038291063 = Integer(207518404209548066524338597893734179511579167725131843041064866227099212459608943719008703724295244625284967169492023289945294798524212134390763647038291063); _sage_const_4725771409600634767390113924858858311605020034390475368968328268083048943070363681325943149918504474295935205503161695453879697645242271074342095220721811 = Integer(4725771409600634767390113924858858311605020034390475368968328268083048943070363681325943149918504474295935205503161695453879697645242271074342095220721811); _sage_const_192592051144695524036406446320257786307445461572986162858397925286285097994481314707381238447094902630926475193331748323319701619067462857212350780878911336 = Integer(192592051144695524036406446320257786307445461572986162858397925286285097994481314707381238447094902630926475193331748323319701619067462857212350780878911336); _sage_const_193688812173982903384783472795228738699350038776830885474416093105926497918886438242198467810363655535293264405878081952755755288332354602004706275270687984 = Integer(193688812173982903384783472795228738699350038776830885474416093105926497918886438242198467810363655535293264405878081952755755288332354602004706275270687984); _sage_const_202961104920932357964606752012498655594311696320674302329637315490777414597169630039745844900811293021086647866035694564486463566748126095081171550340762637 = Integer(202961104920932357964606752012498655594311696320674302329637315490777414597169630039745844900811293021086647866035694564486463566748126095081171550340762637); _sage_const_137046396078371748687622651621186941481856833586227643293569497690272738038368101628696368545843890689018630922289456655581435979243550025699757826311940995 = Integer(137046396078371748687622651621186941481856833586227643293569497690272738038368101628696368545843890689018630922289456655581435979243550025699757826311940995); _sage_const_108321791002545807656680543897570164696297092501068374028277203631090255190244262218544602012187255799471226846663343989851536735289525870107535118074584445 = Integer(108321791002545807656680543897570164696297092501068374028277203631090255190244262218544602012187255799471226846663343989851536735289525870107535118074584445)
from pwn import remote
# from Crypto.Util.number import *

# conn = remote("07.cr.yp.toc.tf", "31010")

p = _sage_const_207518404209548066524338597893734179511579167725131843041064866227099212459608943719008703724295244625284967169492023289945294798524212134390763647038291063 
u = _sage_const_4725771409600634767390113924858858311605020034390475368968328268083048943070363681325943149918504474295935205503161695453879697645242271074342095220721811 
v = _sage_const_192592051144695524036406446320257786307445461572986162858397925286285097994481314707381238447094902630926475193331748323319701619067462857212350780878911336 
w = _sage_const_193688812173982903384783472795228738699350038776830885474416093105926497918886438242198467810363655535293264405878081952755755288332354602004706275270687984 
ca, cb, cc = (
    _sage_const_202961104920932357964606752012498655594311696320674302329637315490777414597169630039745844900811293021086647866035694564486463566748126095081171550340762637 ,
    _sage_const_137046396078371748687622651621186941481856833586227643293569497690272738038368101628696368545843890689018630922289456655581435979243550025699757826311940995 ,
    _sage_const_108321791002545807656680543897570164696297092501068374028277203631090255190244262218544602012187255799471226846663343989851536735289525870107535118074584445 
)

def params():
    conn.sendlineafter("[Q]uit", "e")
    conn.recvuntil(" = ")
    p = int(conn.recvuntil("\n").decode().strip("\n"))
    conn.recvuntil(" = ")
    u = int(conn.recvuntil("\n").decode().strip("\n"))
    conn.recvuntil(" = ")
    v = int(conn.recvuntil("\n").decode().strip("\n"))
    conn.recvuntil(" = ")
    w = int(conn.recvuntil("\n").decode().strip("\n"))
    return (p, u, v, w)

def enc_flag():
    conn.sendlineafter("[Q]uit", "s")
    conn.recvuntil(" = ")
    return list(map(int, conn.recvuntil("\n").decode().strip("\n").split(", ")))

def encrypt(m):
    conn.sendlineafter("[Q]uit", "t")
    conn.sendlineafter(": ", long_to_bytes(m))
    conn.recvuntil(" = ")
    return list(map(int, conn.recvuntil("\n").decode().strip("\n").split(", ")))

'''
w = pow(u, x, p)
v = pow(u, r1, p) 
---
ca = pow(u, r2, p)
cb = pow(v, s, p) = pow(u, r1 * s, p)
cc = m * pow(w, r2+s, p) = m * pow(u, x * r2, p) * pow(u, x * s, p)
---
decrypt
cc * pow(ca, -x, p) * pow(cb, x / r1, p) % p
'''

# p, u, v, w = params()
# ca, cb, cc = enc_flag()

Z = Zmod(p) # p-1 smooth

r = discrete_log(Z(ca), Z(u))
s = discrete_log(Z(cb), Z(v))
flag = Z(cc) / (Z(w) ** (r + s))

# x = discrete_log(Z(w), Z(u))
# r1 = discrete_log(Z(v), Z(u))
# flag = Z(cc) / Z(ca) ** x / Z(cb) ** (x * inverse_mod(r1, p-1))
print(long_to_bytes(flag).decode())

